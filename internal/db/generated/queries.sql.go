// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package queries

import (
	"context"
	"time"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO trip.trip (name, member_id, start_date, end_date)
VALUES ($1, $2, $3, $4)
RETURNING id, name, member_id, start_date, end_date
`

type CreateTripParams struct {
	Name      string
	MemberID  int64
	StartDate time.Time
	EndDate   time.Time
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (TripTrip, error) {
	row := q.db.QueryRowContext(ctx, createTrip,
		arg.Name,
		arg.MemberID,
		arg.StartDate,
		arg.EndDate,
	)
	var i TripTrip
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MemberID,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getTripByID = `-- name: GetTripByID :one
SELECT id, name, member_id, start_date, end_date
FROM trip.trip
WHERE id = $1
`

func (q *Queries) GetTripByID(ctx context.Context, id int64) (TripTrip, error) {
	row := q.db.QueryRowContext(ctx, getTripByID, id)
	var i TripTrip
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MemberID,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
